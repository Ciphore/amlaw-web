import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

// Polyfill URL.canParse for Node runtimes that don't support it
interface URLWithCanParse extends URLConstructor {
  canParse?: (input: string, base?: string) => boolean
}

declare const URLPoly: URLWithCanParse
// eslint-disable-next-line @typescript-eslint/no-redeclare
const URLPoly = URL as unknown as URLWithCanParse

if (typeof URL !== "undefined" && !URLPoly.canParse) {
  URLPoly.canParse = (input: string, base?: string) => {
    try {
      // Use value to avoid no-new lint complaints
      return Boolean(new URL(input, base))
    } catch {
      return false
    }
  }
}

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
